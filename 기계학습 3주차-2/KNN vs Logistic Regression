{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# matplotlib 한글 문제\n",
    "from matplotlib import font_manager, rc\n",
    "font_name = font_manager.FontProperties(fname = \"c:/Windows/Fonts/malgun.ttf\").get_name()\n",
    "rc('font', family = font_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ".. _breast_cancer_dataset:\n",
      "\n",
      "Breast cancer wisconsin (diagnostic) dataset\n",
      "--------------------------------------------\n",
      "\n",
      "**Data Set Characteristics:**\n",
      "\n",
      "    :Number of Instances: 569\n",
      "\n",
      "    :Number of Attributes: 30 numeric, predictive attributes and the class\n",
      "\n",
      "    :Attribute Information:\n",
      "        - radius (mean of distances from center to points on the perimeter)\n",
      "        - texture (standard deviation of gray-scale values)\n",
      "        - perimeter\n",
      "        - area\n",
      "        - smoothness (local variation in radius lengths)\n",
      "        - compactness (perimeter^2 / area - 1.0)\n",
      "        - concavity (severity of concave portions of the contour)\n",
      "        - concave points (number of concave portions of the contour)\n",
      "        - symmetry\n",
      "        - fractal dimension (\"coastline approximation\" - 1)\n",
      "\n",
      "        The mean, standard error, and \"worst\" or largest (mean of the three\n",
      "        worst/largest values) of these features were computed for each image,\n",
      "        resulting in 30 features.  For instance, field 0 is Mean Radius, field\n",
      "        10 is Radius SE, field 20 is Worst Radius.\n",
      "\n",
      "        - class:\n",
      "                - WDBC-Malignant\n",
      "                - WDBC-Benign\n",
      "\n",
      "    :Summary Statistics:\n",
      "\n",
      "    ===================================== ====== ======\n",
      "                                           Min    Max\n",
      "    ===================================== ====== ======\n",
      "    radius (mean):                        6.981  28.11\n",
      "    texture (mean):                       9.71   39.28\n",
      "    perimeter (mean):                     43.79  188.5\n",
      "    area (mean):                          143.5  2501.0\n",
      "    smoothness (mean):                    0.053  0.163\n",
      "    compactness (mean):                   0.019  0.345\n",
      "    concavity (mean):                     0.0    0.427\n",
      "    concave points (mean):                0.0    0.201\n",
      "    symmetry (mean):                      0.106  0.304\n",
      "    fractal dimension (mean):             0.05   0.097\n",
      "    radius (standard error):              0.112  2.873\n",
      "    texture (standard error):             0.36   4.885\n",
      "    perimeter (standard error):           0.757  21.98\n",
      "    area (standard error):                6.802  542.2\n",
      "    smoothness (standard error):          0.002  0.031\n",
      "    compactness (standard error):         0.002  0.135\n",
      "    concavity (standard error):           0.0    0.396\n",
      "    concave points (standard error):      0.0    0.053\n",
      "    symmetry (standard error):            0.008  0.079\n",
      "    fractal dimension (standard error):   0.001  0.03\n",
      "    radius (worst):                       7.93   36.04\n",
      "    texture (worst):                      12.02  49.54\n",
      "    perimeter (worst):                    50.41  251.2\n",
      "    area (worst):                         185.2  4254.0\n",
      "    smoothness (worst):                   0.071  0.223\n",
      "    compactness (worst):                  0.027  1.058\n",
      "    concavity (worst):                    0.0    1.252\n",
      "    concave points (worst):               0.0    0.291\n",
      "    symmetry (worst):                     0.156  0.664\n",
      "    fractal dimension (worst):            0.055  0.208\n",
      "    ===================================== ====== ======\n",
      "\n",
      "    :Missing Attribute Values: None\n",
      "\n",
      "    :Class Distribution: 212 - Malignant, 357 - Benign\n",
      "\n",
      "    :Creator:  Dr. William H. Wolberg, W. Nick Street, Olvi L. Mangasarian\n",
      "\n",
      "    :Donor: Nick Street\n",
      "\n",
      "    :Date: November, 1995\n",
      "\n",
      "This is a copy of UCI ML Breast Cancer Wisconsin (Diagnostic) datasets.\n",
      "https://goo.gl/U2Uwz2\n",
      "\n",
      "Features are computed from a digitized image of a fine needle\n",
      "aspirate (FNA) of a breast mass.  They describe\n",
      "characteristics of the cell nuclei present in the image.\n",
      "\n",
      "Separating plane described above was obtained using\n",
      "Multisurface Method-Tree (MSM-T) [K. P. Bennett, \"Decision Tree\n",
      "Construction Via Linear Programming.\" Proceedings of the 4th\n",
      "Midwest Artificial Intelligence and Cognitive Science Society,\n",
      "pp. 97-101, 1992], a classification method which uses linear\n",
      "programming to construct a decision tree.  Relevant features\n",
      "were selected using an exhaustive search in the space of 1-4\n",
      "features and 1-3 separating planes.\n",
      "\n",
      "The actual linear program used to obtain the separating plane\n",
      "in the 3-dimensional space is that described in:\n",
      "[K. P. Bennett and O. L. Mangasarian: \"Robust Linear\n",
      "Programming Discrimination of Two Linearly Inseparable Sets\",\n",
      "Optimization Methods and Software 1, 1992, 23-34].\n",
      "\n",
      "This database is also available through the UW CS ftp server:\n",
      "\n",
      "ftp ftp.cs.wisc.edu\n",
      "cd math-prog/cpo-dataset/machine-learn/WDBC/\n",
      "\n",
      ".. topic:: References\n",
      "\n",
      "   - W.N. Street, W.H. Wolberg and O.L. Mangasarian. Nuclear feature extraction \n",
      "     for breast tumor diagnosis. IS&T/SPIE 1993 International Symposium on \n",
      "     Electronic Imaging: Science and Technology, volume 1905, pages 861-870,\n",
      "     San Jose, CA, 1993.\n",
      "   - O.L. Mangasarian, W.N. Street and W.H. Wolberg. Breast cancer diagnosis and \n",
      "     prognosis via linear programming. Operations Research, 43(4), pages 570-577, \n",
      "     July-August 1995.\n",
      "   - W.H. Wolberg, W.N. Street, and O.L. Mangasarian. Machine learning techniques\n",
      "     to diagnose breast cancer from fine-needle aspirates. Cancer Letters 77 (1994) \n",
      "     163-171.\n"
     ]
    }
   ],
   "source": [
    "from sklearn.datasets import load_breast_cancer\n",
    "breast_cancer = load_breast_cancer()\n",
    "print(breast_cancer.DESCR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = pd.DataFrame(breast_cancer.data, columns=breast_cancer.feature_names)\n",
    "Y = pd.DataFrame(breast_cancer.target, columns=['target'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean radius</th>\n",
       "      <th>mean texture</th>\n",
       "      <th>mean perimeter</th>\n",
       "      <th>mean area</th>\n",
       "      <th>mean smoothness</th>\n",
       "      <th>mean compactness</th>\n",
       "      <th>mean concavity</th>\n",
       "      <th>mean concave points</th>\n",
       "      <th>mean symmetry</th>\n",
       "      <th>mean fractal dimension</th>\n",
       "      <th>...</th>\n",
       "      <th>worst radius</th>\n",
       "      <th>worst texture</th>\n",
       "      <th>worst perimeter</th>\n",
       "      <th>worst area</th>\n",
       "      <th>worst smoothness</th>\n",
       "      <th>worst compactness</th>\n",
       "      <th>worst concavity</th>\n",
       "      <th>worst concave points</th>\n",
       "      <th>worst symmetry</th>\n",
       "      <th>worst fractal dimension</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.3001</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>0.2419</td>\n",
       "      <td>0.07871</td>\n",
       "      <td>...</td>\n",
       "      <td>25.38</td>\n",
       "      <td>17.33</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.1622</td>\n",
       "      <td>0.6656</td>\n",
       "      <td>0.7119</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.0869</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>0.1812</td>\n",
       "      <td>0.05667</td>\n",
       "      <td>...</td>\n",
       "      <td>24.99</td>\n",
       "      <td>23.41</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.1238</td>\n",
       "      <td>0.1866</td>\n",
       "      <td>0.2416</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.1974</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>0.2069</td>\n",
       "      <td>0.05999</td>\n",
       "      <td>...</td>\n",
       "      <td>23.57</td>\n",
       "      <td>25.53</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.1444</td>\n",
       "      <td>0.4245</td>\n",
       "      <td>0.4504</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.2414</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>0.2597</td>\n",
       "      <td>0.09744</td>\n",
       "      <td>...</td>\n",
       "      <td>14.91</td>\n",
       "      <td>26.50</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.2098</td>\n",
       "      <td>0.8663</td>\n",
       "      <td>0.6869</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20.29</td>\n",
       "      <td>14.34</td>\n",
       "      <td>135.10</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>0.10030</td>\n",
       "      <td>0.13280</td>\n",
       "      <td>0.1980</td>\n",
       "      <td>0.10430</td>\n",
       "      <td>0.1809</td>\n",
       "      <td>0.05883</td>\n",
       "      <td>...</td>\n",
       "      <td>22.54</td>\n",
       "      <td>16.67</td>\n",
       "      <td>152.20</td>\n",
       "      <td>1575.0</td>\n",
       "      <td>0.1374</td>\n",
       "      <td>0.2050</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2364</td>\n",
       "      <td>0.07678</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean radius  mean texture  mean perimeter  mean area  mean smoothness  \\\n",
       "0        17.99         10.38          122.80     1001.0          0.11840   \n",
       "1        20.57         17.77          132.90     1326.0          0.08474   \n",
       "2        19.69         21.25          130.00     1203.0          0.10960   \n",
       "3        11.42         20.38           77.58      386.1          0.14250   \n",
       "4        20.29         14.34          135.10     1297.0          0.10030   \n",
       "\n",
       "   mean compactness  mean concavity  mean concave points  mean symmetry  \\\n",
       "0           0.27760          0.3001              0.14710         0.2419   \n",
       "1           0.07864          0.0869              0.07017         0.1812   \n",
       "2           0.15990          0.1974              0.12790         0.2069   \n",
       "3           0.28390          0.2414              0.10520         0.2597   \n",
       "4           0.13280          0.1980              0.10430         0.1809   \n",
       "\n",
       "   mean fractal dimension  ...  worst radius  worst texture  worst perimeter  \\\n",
       "0                 0.07871  ...         25.38          17.33           184.60   \n",
       "1                 0.05667  ...         24.99          23.41           158.80   \n",
       "2                 0.05999  ...         23.57          25.53           152.50   \n",
       "3                 0.09744  ...         14.91          26.50            98.87   \n",
       "4                 0.05883  ...         22.54          16.67           152.20   \n",
       "\n",
       "   worst area  worst smoothness  worst compactness  worst concavity  \\\n",
       "0      2019.0            0.1622             0.6656           0.7119   \n",
       "1      1956.0            0.1238             0.1866           0.2416   \n",
       "2      1709.0            0.1444             0.4245           0.4504   \n",
       "3       567.7            0.2098             0.8663           0.6869   \n",
       "4      1575.0            0.1374             0.2050           0.4000   \n",
       "\n",
       "   worst concave points  worst symmetry  worst fractal dimension  \n",
       "0                0.2654          0.4601                  0.11890  \n",
       "1                0.1860          0.2750                  0.08902  \n",
       "2                0.2430          0.3613                  0.08758  \n",
       "3                0.2575          0.6638                  0.17300  \n",
       "4                0.1625          0.2364                  0.07678  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = sm.add_constant(X, has_constant='add')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(398, 31) (171, 31) (398, 1) (171, 1)\n"
     ]
    }
   ],
   "source": [
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=0.7, test_size=0.3, random_state=1234, stratify=Y)\n",
    "print(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn.preprocessing as preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "preprocessor = preprocessing.Normalizer()\n",
    "X_train = preprocessor.fit_transform(X_train)\n",
    "X_test = preprocessor.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import neighbors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "KNN method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1bb9a357e80>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "training_accuracy = []\n",
    "test_accuracy = []\n",
    "# 여러 k값에 대한 모델 생성 n_neighbors 를 적용\n",
    "k_settings = range(1, 10)\n",
    "\n",
    "for k in k_settings:\n",
    "    # 모델 생성\n",
    "    ploan_knn = neighbors.KNeighborsClassifier(n_neighbors=k)\n",
    "    ploan_knn.fit(X_train, Y_train)\n",
    "    # 훈련 세트 정확도 저장\n",
    "    training_accuracy.append(ploan_knn.score(X_train, Y_train))\n",
    "    # 일반화 정확도 저장\n",
    "    test_accuracy.append(ploan_knn.score(X_test, Y_test))\n",
    "\n",
    "# K의 변황량에 따른 예측정확도 성능 비교\n",
    "plt.plot(k_settings, training_accuracy, label=\"훈련 정확도\")\n",
    "plt.plot(k_settings, test_accuracy, label=\"테스트 정확도\")\n",
    "plt.ylabel(\"정확도\")\n",
    "plt.xlabel(\"K\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "최적의 K값: 2\n"
     ]
    }
   ],
   "source": [
    "from itertools import compress\n",
    "best_k_temp = test_accuracy==max(test_accuracy)\n",
    "best_k = list(compress(k_settings, best_k_temp))[0]\n",
    "print('최적의 K값:', best_k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import metrics\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(n_neighbors=2)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_ploan_knn = neighbors.KNeighborsClassifier(n_neighbors=best_k)\n",
    "best_ploan_knn.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_predict = best_ploan_knn.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "accuracy = accuracy_score(Y_test, Y_predict)\n",
    "precision = precision_score(Y_test, Y_predict)\n",
    "recall = recall_score(Y_test, Y_predict)\n",
    "f1 = f1_score(Y_test, Y_predict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>accuracy</th>\n",
       "      <th>precision</th>\n",
       "      <th>recall</th>\n",
       "      <th>f1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>KNN_best</th>\n",
       "      <td>0.918129</td>\n",
       "      <td>0.951456</td>\n",
       "      <td>0.915888</td>\n",
       "      <td>0.933333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          accuracy precision    recall        f1\n",
       "KNN_best  0.918129  0.951456  0.915888  0.933333"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result_mat = pd.DataFrame(columns=['accuracy', 'precision', 'recall', 'f1'], index =['KNN_best'])\n",
    "result_mat.loc['KNN_best']=[accuracy, precision, recall, f1]\n",
    "result_mat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Logistic Regression method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Maximum number of iterations has been exceeded.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\juhyj\\anaconda3\\lib\\site-packages\\statsmodels\\base\\model.py:566: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
      "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
     ]
    }
   ],
   "source": [
    "logit_m = sm.Logit(Y_train, X_train)\n",
    "logit_m_train = logit_m.fit(method='powell')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Logit Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>        <td>target</td>      <th>  No. Observations:  </th>  <td>   398</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                 <td>Logit</td>      <th>  Df Residuals:      </th>  <td>   367</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                 <td>MLE</td>       <th>  Df Model:          </th>  <td>    30</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Thu, 30 Sep 2021</td> <th>  Pseudo R-squ.:     </th>  <td>0.9307</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>05:00:42</td>     <th>  Log-Likelihood:    </th> <td> -18.209</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>converged:</th>             <td>False</td>      <th>  LL-Null:           </th> <td> -262.66</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>  LLR p-value:       </th> <td>2.280e-84</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "   <td></td>      <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x1</th>  <td> 1171.7243</td> <td> 5.87e+04</td> <td>    0.020</td> <td> 0.984</td> <td>-1.14e+05</td> <td> 1.16e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x2</th>  <td>  678.9187</td> <td> 2.14e+04</td> <td>    0.032</td> <td> 0.975</td> <td>-4.12e+04</td> <td> 4.25e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x3</th>  <td>  256.1596</td> <td>  474.383</td> <td>    0.540</td> <td> 0.589</td> <td> -673.615</td> <td> 1185.934</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x4</th>  <td>  181.6017</td> <td> 3273.378</td> <td>    0.055</td> <td> 0.956</td> <td>-6234.101</td> <td> 6597.305</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x5</th>  <td>    8.5256</td> <td>   86.944</td> <td>    0.098</td> <td> 0.922</td> <td> -161.881</td> <td>  178.932</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x6</th>  <td>-9.246e+04</td> <td> 1.95e+05</td> <td>   -0.473</td> <td> 0.636</td> <td>-4.75e+05</td> <td>  2.9e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x7</th>  <td>  7.05e+04</td> <td> 1.44e+05</td> <td>    0.491</td> <td> 0.623</td> <td>-2.11e+05</td> <td> 3.52e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x8</th>  <td>-7.059e+04</td> <td> 1.08e+05</td> <td>   -0.655</td> <td> 0.512</td> <td>-2.82e+05</td> <td> 1.41e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x9</th>  <td>-1.006e+05</td> <td> 1.76e+05</td> <td>   -0.572</td> <td> 0.567</td> <td>-4.45e+05</td> <td> 2.44e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x10</th> <td>     1e+04</td> <td> 6.66e+04</td> <td>    0.150</td> <td> 0.881</td> <td> -1.2e+05</td> <td>  1.4e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x11</th> <td>-3559.4555</td> <td> 4.94e+05</td> <td>   -0.007</td> <td> 0.994</td> <td>-9.72e+05</td> <td> 9.64e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x12</th> <td> 3.173e+04</td> <td> 8.88e+04</td> <td>    0.357</td> <td> 0.721</td> <td>-1.42e+05</td> <td> 2.06e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x13</th> <td> 2729.6211</td> <td> 3313.720</td> <td>    0.824</td> <td> 0.410</td> <td>-3765.150</td> <td> 9224.392</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x14</th> <td> -643.6940</td> <td> 5677.356</td> <td>   -0.113</td> <td> 0.910</td> <td>-1.18e+04</td> <td> 1.05e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x15</th> <td> -654.0546</td> <td>  773.759</td> <td>   -0.845</td> <td> 0.398</td> <td>-2170.595</td> <td>  862.486</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x16</th> <td>-2.586e+05</td> <td> 6.84e+05</td> <td>   -0.378</td> <td> 0.706</td> <td> -1.6e+06</td> <td> 1.08e+06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x17</th> <td> 1.174e+05</td> <td> 2.91e+05</td> <td>    0.403</td> <td> 0.687</td> <td>-4.54e+05</td> <td> 6.88e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x18</th> <td>  4.33e+04</td> <td> 1.57e+05</td> <td>    0.277</td> <td> 0.782</td> <td>-2.63e+05</td> <td>  3.5e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x19</th> <td> 2.273e+05</td> <td> 9.31e+05</td> <td>    0.244</td> <td> 0.807</td> <td> -1.6e+06</td> <td> 2.05e+06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x20</th> <td> 1.878e+05</td> <td> 3.85e+05</td> <td>    0.488</td> <td> 0.626</td> <td>-5.67e+05</td> <td> 9.42e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x21</th> <td>-4.105e+05</td> <td> 1.36e+06</td> <td>   -0.301</td> <td> 0.763</td> <td>-3.08e+06</td> <td> 2.26e+06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x22</th> <td> -226.7667</td> <td> 8527.436</td> <td>   -0.027</td> <td> 0.979</td> <td>-1.69e+04</td> <td> 1.65e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x23</th> <td> -693.7022</td> <td>  460.203</td> <td>   -1.507</td> <td> 0.132</td> <td>-1595.684</td> <td>  208.279</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x24</th> <td>  194.1456</td> <td>  809.177</td> <td>    0.240</td> <td> 0.810</td> <td>-1391.812</td> <td> 1780.103</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x25</th> <td>  -24.6282</td> <td>   82.141</td> <td>   -0.300</td> <td> 0.764</td> <td> -185.622</td> <td>  136.366</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x26</th> <td> 3.981e+04</td> <td> 1.09e+05</td> <td>    0.367</td> <td> 0.714</td> <td>-1.73e+05</td> <td> 2.53e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x27</th> <td>-1.982e+04</td> <td> 5.39e+04</td> <td>   -0.368</td> <td> 0.713</td> <td>-1.25e+05</td> <td> 8.58e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x28</th> <td> -690.8251</td> <td>  2.1e+04</td> <td>   -0.033</td> <td> 0.974</td> <td>-4.19e+04</td> <td> 4.06e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x29</th> <td>-7.298e+04</td> <td> 1.09e+05</td> <td>   -0.670</td> <td> 0.503</td> <td>-2.86e+05</td> <td> 1.41e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x30</th> <td>-9840.4890</td> <td> 5.46e+04</td> <td>   -0.180</td> <td> 0.857</td> <td>-1.17e+05</td> <td> 9.72e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>x31</th> <td> 6.429e+04</td> <td>  2.3e+05</td> <td>    0.279</td> <td> 0.780</td> <td>-3.87e+05</td> <td> 5.16e+05</td>\n",
       "</tr>\n",
       "</table><br/><br/>Possibly complete quasi-separation: A fraction 0.73 of observations can be<br/>perfectly predicted. This might indicate that there is complete<br/>quasi-separation. In this case some parameters will not be identified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                           Logit Regression Results                           \n",
       "==============================================================================\n",
       "Dep. Variable:                 target   No. Observations:                  398\n",
       "Model:                          Logit   Df Residuals:                      367\n",
       "Method:                           MLE   Df Model:                           30\n",
       "Date:                Thu, 30 Sep 2021   Pseudo R-squ.:                  0.9307\n",
       "Time:                        05:00:42   Log-Likelihood:                -18.209\n",
       "converged:                      False   LL-Null:                       -262.66\n",
       "Covariance Type:            nonrobust   LLR p-value:                 2.280e-84\n",
       "==============================================================================\n",
       "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "x1          1171.7243   5.87e+04      0.020      0.984   -1.14e+05    1.16e+05\n",
       "x2           678.9187   2.14e+04      0.032      0.975   -4.12e+04    4.25e+04\n",
       "x3           256.1596    474.383      0.540      0.589    -673.615    1185.934\n",
       "x4           181.6017   3273.378      0.055      0.956   -6234.101    6597.305\n",
       "x5             8.5256     86.944      0.098      0.922    -161.881     178.932\n",
       "x6         -9.246e+04   1.95e+05     -0.473      0.636   -4.75e+05     2.9e+05\n",
       "x7           7.05e+04   1.44e+05      0.491      0.623   -2.11e+05    3.52e+05\n",
       "x8         -7.059e+04   1.08e+05     -0.655      0.512   -2.82e+05    1.41e+05\n",
       "x9         -1.006e+05   1.76e+05     -0.572      0.567   -4.45e+05    2.44e+05\n",
       "x10             1e+04   6.66e+04      0.150      0.881    -1.2e+05     1.4e+05\n",
       "x11        -3559.4555   4.94e+05     -0.007      0.994   -9.72e+05    9.64e+05\n",
       "x12         3.173e+04   8.88e+04      0.357      0.721   -1.42e+05    2.06e+05\n",
       "x13         2729.6211   3313.720      0.824      0.410   -3765.150    9224.392\n",
       "x14         -643.6940   5677.356     -0.113      0.910   -1.18e+04    1.05e+04\n",
       "x15         -654.0546    773.759     -0.845      0.398   -2170.595     862.486\n",
       "x16        -2.586e+05   6.84e+05     -0.378      0.706    -1.6e+06    1.08e+06\n",
       "x17         1.174e+05   2.91e+05      0.403      0.687   -4.54e+05    6.88e+05\n",
       "x18          4.33e+04   1.57e+05      0.277      0.782   -2.63e+05     3.5e+05\n",
       "x19         2.273e+05   9.31e+05      0.244      0.807    -1.6e+06    2.05e+06\n",
       "x20         1.878e+05   3.85e+05      0.488      0.626   -5.67e+05    9.42e+05\n",
       "x21        -4.105e+05   1.36e+06     -0.301      0.763   -3.08e+06    2.26e+06\n",
       "x22         -226.7667   8527.436     -0.027      0.979   -1.69e+04    1.65e+04\n",
       "x23         -693.7022    460.203     -1.507      0.132   -1595.684     208.279\n",
       "x24          194.1456    809.177      0.240      0.810   -1391.812    1780.103\n",
       "x25          -24.6282     82.141     -0.300      0.764    -185.622     136.366\n",
       "x26         3.981e+04   1.09e+05      0.367      0.714   -1.73e+05    2.53e+05\n",
       "x27        -1.982e+04   5.39e+04     -0.368      0.713   -1.25e+05    8.58e+04\n",
       "x28         -690.8251    2.1e+04     -0.033      0.974   -4.19e+04    4.06e+04\n",
       "x29        -7.298e+04   1.09e+05     -0.670      0.503   -2.86e+05    1.41e+05\n",
       "x30        -9840.4890   5.46e+04     -0.180      0.857   -1.17e+05    9.72e+04\n",
       "x31         6.429e+04    2.3e+05      0.279      0.780   -3.87e+05    5.16e+05\n",
       "==============================================================================\n",
       "\n",
       "Possibly complete quasi-separation: A fraction 0.73 of observations can be\n",
       "perfectly predicted. This might indicate that there is complete\n",
       "quasi-separation. In this case some parameters will not be identified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logit_m_train.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.00000000e+00 1.00000000e+00 9.81867717e-01 3.55245748e-09\n",
      " 9.81118111e-01 1.00000000e+00 9.86323150e-01 2.41432892e-01\n",
      " 9.99961948e-01 9.99311067e-01 1.68408854e-05 9.99894412e-01\n",
      " 3.44991696e-08 6.70228518e-06 9.55410882e-06 9.99999834e-01\n",
      " 2.13100987e-13 9.99999493e-01 1.00000000e+00 9.99999971e-01\n",
      " 2.93879793e-11 2.85136502e-12 4.71385558e-02 1.15982735e-20\n",
      " 1.05775395e-12 1.48013777e-08 1.00000000e+00 3.95271461e-09\n",
      " 9.99961315e-01 1.00000000e+00 1.21627563e-03 9.99999943e-01\n",
      " 3.53999751e-04 3.59689920e-11 2.56644237e-09 9.96584015e-01\n",
      " 1.00000000e+00 1.00000000e+00 9.99891519e-01 2.43966847e-12\n",
      " 2.50113849e-07 9.99983329e-01 1.00000000e+00 9.99795376e-01\n",
      " 1.04988581e-01 9.99999935e-01 1.00000000e+00 1.70006240e-10\n",
      " 9.99998834e-01 9.94479652e-01 2.08676158e-04 1.00000000e+00\n",
      " 8.17378883e-02 1.00000000e+00 1.00000000e+00 9.97395921e-01\n",
      " 1.00000000e+00 1.00000000e+00 9.99999997e-01 3.02711630e-03\n",
      " 5.88834874e-07 9.99999254e-01 9.99999683e-01 8.38229576e-01\n",
      " 9.99999823e-01 1.00000000e+00 4.65031744e-06 9.99993699e-01\n",
      " 4.54612199e-07 9.98590179e-01 9.98169450e-01 2.42286120e-08\n",
      " 9.99999911e-01 6.88865748e-07 1.10918623e-08 9.99996421e-01\n",
      " 9.99818455e-01 9.99999838e-01 9.99999978e-01 1.35110869e-02\n",
      " 9.99999845e-01 1.00000000e+00 1.54708640e-05 1.00000000e+00\n",
      " 1.00000000e+00 9.99999999e-01 9.50194035e-13 1.00000000e+00\n",
      " 8.83762294e-01 9.79068697e-01 6.28061057e-04 1.00000000e+00\n",
      " 1.47721834e-07 1.96999607e-09 7.41633984e-05 9.99998059e-01\n",
      " 9.99996459e-01 4.67471048e-01 1.00000000e+00 1.00000000e+00\n",
      " 2.85651669e-08 1.82795396e-03 1.00000000e+00 9.99999171e-01\n",
      " 9.99999997e-01 2.81749987e-07 1.00000000e+00 1.00000000e+00\n",
      " 9.99999690e-01 9.99948361e-01 9.70155922e-01 9.99997752e-01\n",
      " 1.00000000e+00 9.99999982e-01 1.00000000e+00 9.99810928e-01\n",
      " 1.00000000e+00 9.99999830e-01 1.00000000e+00 1.53283361e-11\n",
      " 2.39840779e-12 8.65794668e-14 1.17995131e-08 9.99991337e-01\n",
      " 9.99999984e-01 9.99999925e-01 1.00000000e+00 2.85040430e-18\n",
      " 9.99902547e-01 9.99408886e-01 8.96398655e-02 9.38270457e-13\n",
      " 8.04998987e-02 7.18553415e-04 4.75667957e-07 1.07039431e-09\n",
      " 4.95376741e-06 9.93178707e-01 1.00000000e+00 1.00000000e+00\n",
      " 1.00000000e+00 1.00000000e+00 1.00000000e+00 5.53337321e-01\n",
      " 2.65966728e-06 2.36875027e-01 9.99997445e-01 9.99999849e-01\n",
      " 5.19537187e-08 1.00000000e+00 9.95105927e-01 2.06936764e-12\n",
      " 5.73893923e-12 8.94962685e-09 9.99999971e-01 9.99993806e-01\n",
      " 8.90679702e-01 1.60351876e-04 1.00000000e+00 1.00000000e+00\n",
      " 2.30878261e-06 5.11040829e-01 1.00000000e+00 2.57225282e-14\n",
      " 1.00000000e+00 9.99999225e-01 9.99999987e-01 9.99995501e-01\n",
      " 5.73204134e-11 9.95832486e-01 2.63466431e-06]\n"
     ]
    }
   ],
   "source": [
    "Y_predict_lg = logit_m_train.predict(X_test)\n",
    "print(Y_predict_lg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Y_predict를 threshold를 기준으로 0과 1로 나누어주는 함수 생성\n",
    "def cut_off(y,threshold):\n",
    "    Y = y.copy() # copy함수를 사용하여 이전의 y값이 변화지 않게 함\n",
    "    Y[Y>threshold]=1\n",
    "    Y[Y<=threshold]=0\n",
    "    Y = Y.astype(int)\n",
    "    return Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_predict_t = cut_off(Y_predict_lg,0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy : 0.971\n",
      "Precision : 0.981\n",
      "Recall : 0.972\n",
      "F1 : 0.977\n"
     ]
    }
   ],
   "source": [
    "accuracy = accuracy_score(Y_test, Y_predict_t)\n",
    "precision = precision_score(Y_test, Y_predict_t)\n",
    "recall = recall_score(Y_test, Y_predict_t)\n",
    "f1 = f1_score(Y_test, Y_predict_t)\n",
    "print('Accuracy : {0:.3f}'.format(accuracy))\n",
    "print('Precision : {0:.3f}'.format(precision))\n",
    "print('Recall : {0:.3f}'.format(recall))\n",
    "print('F1 : {0:.3f}'.format(f1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "performance  Accuracy  Precision    Recall        F1\n",
      "threshold                                           \n",
      "0.0          0.625731   0.625731  1.000000  0.769784\n",
      "0.1          0.970760   0.963636  0.990654  0.976959\n",
      "0.2          0.964912   0.963303  0.981308  0.972222\n",
      "0.3          0.964912   0.971963  0.971963  0.971963\n",
      "0.4          0.964912   0.971963  0.971963  0.971963\n",
      "0.5          0.970760   0.981132  0.971963  0.976526\n",
      "0.6          0.959064   0.980769  0.953271  0.966825\n",
      "0.7          0.959064   0.980769  0.953271  0.966825\n",
      "0.8          0.959064   0.980769  0.953271  0.966825\n",
      "0.9          0.941520   0.980198  0.925234  0.951923\n"
     ]
    }
   ],
   "source": [
    "# 임계값에 따른 비교\n",
    "def perf_eval(cm):\n",
    "    # Accuracy\n",
    "    Accuracy = (cm[0, 0] + cm[1, 1]) / sum(cm.reshape(-1, ))\n",
    "    # Precision\n",
    "    Precision = cm[1, 1] /sum(cm[:, 1])\n",
    "    # Recall\n",
    "    Recall = cm[1, 1] / sum(cm[1])\n",
    "    # F1-score\n",
    "    F1 = 2 * Recall * Precision / (Recall + Precision)\n",
    "    return ([Accuracy, Precision, Recall, F1])\n",
    "\n",
    "threshold = np.arange(0,1,0.1)\n",
    "table = pd.DataFrame(columns=['Accuracy','Precision','Recall','F1'])\n",
    "for i in threshold:\n",
    "    Y_predict_temp = cut_off(Y_predict,i)\n",
    "    confusion_matrix_temp = confusion_matrix(Y_test, Y_predict_temp)\n",
    "    table.loc[i] = perf_eval(confusion_matrix_temp)\n",
    "table.index.name='threshold'\n",
    "table.columns.name='performance'\n",
    "print(table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score, roc_auc_score, roc_curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_ROC(y_train_true, y_train_prob, y_test_true, y_test_prob):\n",
    "    '''\n",
    "    a funciton to plot the ROC curve for train labels and test labels.\n",
    "    Use the best threshold found in train set to classify items in test set.\n",
    "    '''\n",
    "    fpr_train, tpr_train, thresholds_train = roc_curve(y_train_true, y_train_prob, pos_label =True)\n",
    "    sum_sensitivity_specificity_train = tpr_train + (1-fpr_train)\n",
    "    best_threshold_id_train = np.argmax(sum_sensitivity_specificity_train)\n",
    "    best_threshold = thresholds_train[best_threshold_id_train]\n",
    "    best_fpr_train = fpr_train[best_threshold_id_train]\n",
    "    best_tpr_train = tpr_train[best_threshold_id_train]\n",
    "    y_train = y_train_prob > best_threshold\n",
    "\n",
    "    cm_train = confusion_matrix(y_train_true, y_train)\n",
    "    acc_train = accuracy_score(y_train_true, y_train)\n",
    "    auc_train = roc_auc_score(y_train_true, y_train)\n",
    "\n",
    "    print('Train Accuracy: %s ' %acc_train)\n",
    "    print('Train AUC: %s ' %auc_train)\n",
    "    print('Train Confusion Matrix:')\n",
    "    print(cm_train)\n",
    "\n",
    "    fig = plt.figure(figsize=(10,5))\n",
    "    ax = fig.add_subplot(121)\n",
    "    curve1 = ax.plot(fpr_train, tpr_train)\n",
    "    curve2 = ax.plot([0, 1], [0, 1], color='navy', linestyle='--')\n",
    "    dot = ax.plot(best_fpr_train, best_tpr_train, marker='o', color='black')\n",
    "    ax.text(best_fpr_train, best_tpr_train, s = '(%.3f,%.3f)' %(best_fpr_train, best_tpr_train))\n",
    "    plt.xlim([0.0, 1.0])\n",
    "    plt.ylim([0.0, 1.0])\n",
    "    plt.xlabel('False Positive Rate')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.title('ROC curve (Train), AUC = %.4f'%auc_train)\n",
    "\n",
    "    fpr_test, tpr_test, thresholds_test = roc_curve(y_test_true, y_test_prob, pos_label =True)\n",
    "\n",
    "    y_test = y_test_prob > best_threshold\n",
    "\n",
    "    cm_test = confusion_matrix(y_test_true, y_test)\n",
    "    acc_test = accuracy_score(y_test_true, y_test)\n",
    "    auc_test = roc_auc_score(y_test_true, y_test)\n",
    "\n",
    "    print('Test Accuracy: %s ' %acc_test)\n",
    "    print('Test AUC: %s ' %auc_test)\n",
    "    print('Test Confusion Matrix:')\n",
    "    print(cm_test)\n",
    "\n",
    "    tpr_score = float(cm_test[1][1])/(cm_test[1][1] + cm_test[1][0])\n",
    "    fpr_score = float(cm_test[0][1])/(cm_test[0][0]+ cm_test[0][1])\n",
    "\n",
    "    ax2 = fig.add_subplot(122)\n",
    "    curve1 = ax2.plot(fpr_test, tpr_test)\n",
    "    curve2 = ax2.plot([0, 1], [0, 1], color='navy', linestyle='--')\n",
    "    dot = ax2.plot(fpr_score, tpr_score, marker='o', color='black')\n",
    "    ax2.text(fpr_score, tpr_score, s = '(%.3f,%.3f)' %(fpr_score, tpr_score))\n",
    "    plt.xlim([0.0, 1.0])\n",
    "    plt.ylim([0.0, 1.0])\n",
    "    plt.xlabel('False Positive Rate')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.title('ROC curve (Test), AUC = %.4f'%auc_test)\n",
    "    plt.savefig('ROC', dpi = 500)\n",
    "    plt.show()\n",
    "\n",
    "    return best_threshold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy: 0.9798994974874372 \n",
      "Train AUC: 0.9784864864864866 \n",
      "Train Confusion Matrix:\n",
      "[[144   4]\n",
      " [  4 246]]\n",
      "Test Accuracy: 0.9649122807017544 \n",
      "Test AUC: 0.9656834112149533 \n",
      "Test Confusion Matrix:\n",
      "[[ 62   2]\n",
      " [  4 103]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Threshold: 0.5487116895941467\n"
     ]
    }
   ],
   "source": [
    "best_threshold = plot_ROC(y_train_true=Y_train, y_train_prob=logit_m_train.predict(X_train), \n",
    "                          y_test_true=Y_test, y_test_prob=logit_m_train.predict(X_test))\n",
    "print('Best Threshold:', best_threshold)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
